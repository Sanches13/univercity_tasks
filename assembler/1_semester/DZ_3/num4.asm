section .bss
 fd resb 4      ;выделяем 4 байта для файлового дескриптора файла
 buf resb 1     ;выделяем 1 байт для buf

section .text:
global _start
_start:
 pop ebx     ;передаём имя файла при запуске программы 
 pop ebx
 pop ebx

 mov eax, 5    ;для открытия файла задаём системный вызов sys_open
 mov ecx, 2    ;задаём режим открытия файла, в данном случае открываем файл и для чтения, и для записи
 mov edx, 0
 int 0x80
 mov [fd], eax    ;после открытия файла помещаем файловый дескриптор в переменную fd

point:             ;создаём метку point
 mov eax, 3        ;теперь считываем один байт из файла, для этого задаём системный вызов sys_read
 mov ebx, [fd]     ;передаём значение файлового дескриптора файла
 mov ecx, buf      ;считываем в переменную buf 1 байт
 mov edx, 1
 int 0x80

 cmp eax, 1    ;этот системный вызов по результату выполнения возвращает число действительно считанных байт
 jne point2    ;это число хранится в eax, поэтому если значение eax не равно единице, то если достигнут конец файла, то
               ;перемещаемся к метке point2
 mov al, [buf]    ;помещаем в регистр al значение переменной buf
 rol al, 4        ;команда rol циклически сдвигает все биты первого операнда влево, в навшем случае на 4 разряда
 mov [buf], al    ;помещаем в переменную buf значение регистра al

 mov eax, 19      ;задаём системный вызов sys_lseek, который позволит переместится нам на нужную позицию в файле
 mov ebx, [fd]    ;передаём файловый дескриптор
 mov ecx, -1      ;в edx передаём 1, что означает, что мы хотим сдвинуться относительно текущего положения файлового дескриптора
 mov edx, 1       ;и перемещаемся на -1 позицию относительно текущего положения файлового дескриптора
 int 0x80

 mov eax, 4       ;задаём системный вызов sys_write
 mov ebx, [fd]    ;передаём значение файлового дескриптора 
 mov ecx, buf     ;записываем в файл значение переменной buf
 mov edx, 1
 int 0x80
 jmp point     ;перемещаемся к метке point

point2:
 mov eax, 6       ;как только достигнут конец файла, перемещаемся к метке point2
 mov ebx, [fd]    ;закрываем файл
 int 0x80
 
 mov eax, 1       ;завершаем выполнение программы
 mov ebx, 0 
 int 0x80

