section .bss 
 ind_string resb 4       ;выделяем 4 байта для ind_string
 ind_gamma resb 4        ;выделяем 4 байта для ind_gamma
 string resb 100         ;выделяем 100 байт для string, куда будет записана введённая строка
 symbol resb 1           ;выделяем 1 байт для symbol

section .data 
 gamma dd '1234'         ;гамма для шифрования строки

section .text
 global _start
_start:

 mov eax, 3            ;получаем строку из терминала, записываем ее в переменную string
 mov ebx, 0
 mov ecx, string
 mov edx, 101
 int 0x80

 mov eax, 0
 mov [ind_gamma], eax      ;обнуляем значение переменной ind_gamma
 mov [ind_string], eax      ;обнуляем значение переменной ind_string

point:
 mov esi, gamma            ;помещаем в регистр esi адрес, по которому расположена гамма
 mov edi, string           ;помещаем в регистр edi адрес, по которому расположена строка
    
 mov eax, [ind_gamma]       ;помещаем в регистр ecx значение переменной ind_gamma, то есть индекса очередного символа гаммы
 add esi, eax               ;прибавляем к esi значение индекса символа гаммы
 mov bl, [esi]              ;символ гаммы помещаем в регистр bl
 
 mov eax, [ind_string]       ;помещаем значение счётчика ind_string в регистр eax, то есть индекса очередного символа строки
 add edi, eax                ;прибавляем к edi индекс символа строки
 mov al, [edi]               ;помещаем в регистр al символ строки
 cmp al, 0x0A                ;сравниваем этот символ с 0x0A, то есть символом перехода строки
 je exit                     ;в случае равенства, то есть при достижении конца строки, переходим к метке exit

 xor al, bl         ;инчае выполняем операцию xor со значениями регситров al и bl, то есть символами строки и гаммы

 mov [symbol], al   ;помещаем полученное значение в переменную symbol
 mov eax, 4         ;выводим значение этой переменной на экран, то есть преобразованный символ строки
 mov ebx, 1
 mov ecx, symbol
 mov edx, 1
 int 0x80

 mov al, [ind_string]        ;помещаем индекс очередного символа строки в регистр al
 inc al                      ;увеличиваем значение индекса на 1
 cmp al, 100                 ;сравниваем значение с максимальной длиной строки
 je exit                     ;при достижении последнего символа строки премещаемся к метке exit
 mov [ind_string], al        ;иначе помещаем индекс символа строки обратно в переменную
 
 mov al, [ind_gamma]        ;помещаем индекс очередного символа гаммы в регистр al   
 inc al                     ;увеличиваем значение индекса на 1
 cmp al, 4                  ;сравниваем значение с длиной гаммы
 je point2                  ;в случае равенства переходим к метке point2
 mov [ind_gamma], al        ;иначе помещаем индекс символа гаммы обратно в переменную
 jmp point                  ;переходим к метке point

point2:                 ;преобразуем индекс символа гаммы
 mov al, 0              ;обнуляем индекс
 mov [ind_gamma], al       
 jmp point              ;переходим к метке point

exit:               ;завершаем программу
 mov eax, 1 
 mov ebx, 0
 int 0x80
